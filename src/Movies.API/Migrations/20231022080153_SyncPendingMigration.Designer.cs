// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movies.API;

#nullable disable

namespace Movies.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231022080153_SyncPendingMigration")]
    partial class SyncPendingMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Movies.API.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("DeletedAt Is NULL");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 22, 8, 1, 52, 838, DateTimeKind.Utc).AddTicks(6346),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 22, 8, 1, 52, 838, DateTimeKind.Utc).AddTicks(6352),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 22, 8, 1, 52, 838, DateTimeKind.Utc).AddTicks(6354),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 22, 8, 1, 52, 838, DateTimeKind.Utc).AddTicks(6355),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 10, 22, 8, 1, 52, 838, DateTimeKind.Utc).AddTicks(6357),
                            Name = "Action"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 10, 22, 8, 1, 52, 838, DateTimeKind.Utc).AddTicks(6359),
                            Name = "Retro"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 10, 22, 8, 1, 52, 838, DateTimeKind.Utc).AddTicks(6360),
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 10, 22, 8, 1, 52, 838, DateTimeKind.Utc).AddTicks(6361),
                            Name = "Biopic"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 10, 22, 8, 1, 52, 838, DateTimeKind.Utc).AddTicks(6363),
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 10, 22, 8, 1, 52, 838, DateTimeKind.Utc).AddTicks(6364),
                            Name = "Romance"
                        });
                });

            modelBuilder.Entity("Movies.API.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<int>("RuntimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 22, 8, 1, 52, 838, DateTimeKind.Utc).AddTicks(6367),
                            ReleaseYear = 2012,
                            RuntimeMinutes = 143,
                            Title = "Avengers"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 22, 8, 1, 52, 838, DateTimeKind.Utc).AddTicks(6371),
                            ReleaseYear = 2003,
                            RuntimeMinutes = 143,
                            Title = "Pirates of the Caribbean"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 22, 8, 1, 52, 838, DateTimeKind.Utc).AddTicks(6373),
                            ReleaseYear = 2022,
                            RuntimeMinutes = 148,
                            Title = "Spider-Man: No way home"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 22, 8, 1, 52, 838, DateTimeKind.Utc).AddTicks(6375),
                            ReleaseYear = 2021,
                            RuntimeMinutes = 148,
                            Title = "The Matrix Resurrections"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 10, 22, 8, 1, 52, 838, DateTimeKind.Utc).AddTicks(6377),
                            ReleaseYear = 2013,
                            RuntimeMinutes = 112,
                            Title = "The Conjuring"
                        });
                });

            modelBuilder.Entity("Movies.API.Entities.MovieGenreMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenreMappings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreId = 2,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 2,
                            GenreId = 3,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 3,
                            GenreId = 1,
                            MovieId = 2
                        },
                        new
                        {
                            Id = 4,
                            GenreId = 2,
                            MovieId = 2
                        },
                        new
                        {
                            Id = 5,
                            GenreId = 9,
                            MovieId = 2
                        },
                        new
                        {
                            Id = 6,
                            GenreId = 3,
                            MovieId = 3
                        },
                        new
                        {
                            Id = 7,
                            GenreId = 2,
                            MovieId = 4
                        },
                        new
                        {
                            Id = 8,
                            GenreId = 3,
                            MovieId = 4
                        },
                        new
                        {
                            Id = 9,
                            GenreId = 3,
                            MovieId = 5
                        },
                        new
                        {
                            Id = 10,
                            GenreId = 4,
                            MovieId = 5
                        },
                        new
                        {
                            Id = 11,
                            GenreId = 5,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 12,
                            GenreId = 9,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 13,
                            GenreId = 9,
                            MovieId = 4
                        },
                        new
                        {
                            Id = 14,
                            GenreId = 5,
                            MovieId = 3
                        },
                        new
                        {
                            Id = 15,
                            GenreId = 9,
                            MovieId = 3
                        },
                        new
                        {
                            Id = 16,
                            GenreId = 5,
                            MovieId = 4
                        });
                });

            modelBuilder.Entity("Movies.API.Entities.MovieGenreMapping", b =>
                {
                    b.HasOne("Movies.API.Entities.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movies.API.Entities.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Movies.API.Entities.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Movies.API.Entities.Movie", b =>
                {
                    b.Navigation("Genres");
                });
#pragma warning restore 612, 618
        }
    }
}
